Name

    ARB_debug_output2

Name Strings

    GL_ARB_debug_output2

Contact

    Piers Daniell, NVIDIA Corporation (pdaniell 'at' nvidia.com)

Contributors

    Pat Brown, NVIDIA

Status

    Complete.
    Approved by the ARB on 2012/06/12.

Version

    Last Modified Date:         April 19, 2012
    Revision:                   3

Number

    ARB Extension #126

Dependencies

    ARB_debug_output is required.

    This extension is written against The OpenGL 4.2 (Compatibility Profile)
    specification.

Overview

    This extension specifies how the existing ARB_debug_output functionality
    operates in both debug and non-debug contexts to allow the inclusion of
    ARB_debug_output into the OpenGL 4.3 core specification.

    Some existing implementations of ARB_debug_output only expose the
    ARB_debug_output extension string if the context was created with the
    debug flag {GLX|WGL}_CONTEXT_DEBUG_BIT_ARB as specified in
    {GLX|WGL}_ARB_create_context. The behavior is not obvious when the
    functionality is brought into the OpenGL core specification because the
    extension string and function entry points must always exist.

    This extension modifies the existing ARB_debug_output extension to
    allow implementations to always have an empty message log. The
    specific messages written to the message log or callback routines
    are already implementation defined, so this specification simply
    makes it explicit that it's fine for there to be zero messages
    generated, which is useful if the context is non-debug.

    Debug output can be enabled and disabled by changing the DEBUG_OUTPUT
    state. It is implementation defined how much debug output is generated
    if the context was created without the CONTEXT_DEBUG_BIT set. There is
    a new query bit added to the existing GL_CONTEXT_FLAGS state to specify
    whether the context was created with debug enabled.

New Procedures and Functions

    None

New Tokens

    Returned by GetIntegerv when <pname> is CONTEXT_FLAGS:

        CONTEXT_FLAG_DEBUG_BIT                          0x00000002
        
    Tokens accepted by the <target> parameters of Enable, Disable,
    and IsEnabled:
    
        DEBUG_OUTPUT                                    0x92E0

Additions to the OpenGL 4.2 (Compatibility Profile) Specification

Additions to Chapter 5 of the OpenGL 4.2 (Compatibility Profile)
Specification (Special Functions)

    Modify Section 5.5 "Debug Output"
    
    Add to the end of the Section 5.5 introduction, but before the start
    of Section 5.5.1:

    "The GL may provide different levels of debug output depending on how
    the context was created. If the context was created without the
    CONTEXT_FLAG_DEBUG_BIT in the CONTEXT_FLAGS state, as described in Section
    6.1.12, then the GL may optionally not generate any debug messages, but
    the functions described below will otherwise operate without error.
    
    Debug output functionality is controlled with the DEBUG_OUTPUT enable
    state. If the context is created with the CONTEXT_FLAG_DEBUG_BIT set
    then the initial state of DEBUG_OUTPUT is TRUE, otherwise the initial
    state of DEBUG_OUTPUT is FALSE. In a debug context, if DEBUG_OUTPUT
    is disabled the GL will not generate any debug output logs or
    callbacks. Enabling DEBUG_OUTPUT again will enable full debug output
    functionality. If the context was created without the
    CONTEXT_FLAG_DEBUG_BIT and the DEBUG_OUTPUT is later enabled, the level
    of debug output logging is defined by the GL implementation, which may
    have zero debug output. To guarantee the full debug output support of the
    GL implementation the context should be created with
    CONTEXT_FLAG_DEBUG_BIT context flag bit set."

    Modify Section 5.5.2 "Debug Message Callback"

    Add the following to the end of this section:

    "If the DEBUG_OUTPUT state is disabled then the GL will not call the
    callback function."
    
    Modify Section 5.5.3 "Debug Message Log"
    
    Add to the end of this section:
    
    "If the DEBUG_OUTPUT state is disabled then no messages are added to the
    message log."
    
    Modify Section 5.5.4 "Controlling Debug Messages"
    
    Add to the end of this section:
    
    "If the DEBUG_OUTPUT state is disabled the GL operates the same as if
    messages of every <source>, <type> or <severity> are disabled."
    
    Modify Section 5.5.5 "Externally Generated Messages"
    
    Add to the end of this section:
    
    "If the DEBUG_OUTPUT state is disabled calls to DebugMessageInsert are
    discarded and do not generate an error."

Additions to Chapter 6 of the OpenGL 4.2 (Compatibility Profile)
Specification (State and State Requests)

    Modify Section 6.1.12 "Pointer and String Queries"

    Add to the paragraph describing the context profile mask and flags
    (preceding the description of GetStringi) on page 485:

    "If CONTEXT_FLAG_DEBUG_BIT is set in CONTEXT_FLAGS, then the DEBUG_OUTPUT
    state, as described in section 5.5, will be enabled by default."

    Modify Section 6.1.15 "Debug Output Queries"
    
    Add to the end of this section:
    
    "If the context was created without the CONTEXT_FLAG_DEBUG_BIT in the
    CONTEXT_FLAGS state, as described in Section 6.1.12, then the GL can opt
    to never add messages to the message log so GetDebugMessageLog will
    always return zero."

Additions to the AGL/GLX/WGL Specifications

    None

Interactions with GLX_ARB_create_context_robustness

    If the GLX window-system binding API is used to create a context,
    the GLX_ARB_create_context extension is supported, and the bit
    GLX_CONTEXT_DEBUG_BIT_ARB is set in GLX_CONTEXT_FLAGS when
    glXCreateContextAttribsARB is called, the resulting context will
    have debug enabled, and the CONTEXT_FLAG_DEBUG_BIT bit will be set
    in CONTEXT_FLAGS as described above in section 6.1.12.

Interactions with WGL_ARB_create_context_robustness

    If the WGL window-system binding API is used to create a context,
    the WGL_ARB_create_context extension is supported, and the bit
    WGL_CONTEXT_DEBUG_BIT_ARB is set in WGL_CONTEXT_FLAGS when
    wglCreateContextAttribsARB is called, the resulting context will
    have debug enabled, and the CONTEXT_FLAG_DEBUG_BIT bit will be set
    in CONTEXT_FLAGS as described above in section 6.1.12.

Errors

    None

New State
         
    Add to the Debug Output table:
                                                                       Initial
    Get Value                             Type  Get Command            Value           Description                Sec     Attribute
    --------------------------            ----  -----------            -----           -------------------------  ------  ---------
    DEBUG_OUTPUT                          B     IsEnabled              Depends on      The enabled state for      5.5
                                                                       the context*    debug output functionality

    * Contexts created with the CONTEXT_DEBUG_BIT bit set, as defined in
    GLX_ARB_create_context and WGL_ARB_create_context control the initial
    value of this state. If CONTEXT_DEBUG_BIT is set then the initial
    value of DEBUG_OUTPUT is TRUE otherwise its FALSE.

New Implementation Dependent State

    None

Issues

    1) Should there be a way to enable and disable the debug output
    functionality via glEnable(GL_DEBUG_OUTPUT) in addition to the way
    the context is created? This may be useful for third-party or pre-existing
    code that doesn't have control over how the context is created. This
    could be exposed in addition to the context creation flag, and the
    context creation flag just sets the default state of the enable.
    
    RESOLVED: Yes, based on various feedback this would be useful. Added
    to revision 3 of this extension spec.

Revision History

    Rev.    Date    Author    Changes
    ----  --------  --------  -----------------------------------------------
    3     04/19/12  pdaniell  Resolve issue 1 and add GL_DEBUG_OUTPUT enable.

    2     03/29/12  pdaniell  Add issue 1.

    1     01/23/12  pdaniell  Initial version.
