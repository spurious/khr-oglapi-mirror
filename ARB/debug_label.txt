Name

    ARB_debug_label

Name Strings

    GL_ARB_debug_label

Contact

    Christophe Riccio, AMD (christophe.riccio'at'amd.com)

Contributors

    Seth Sowerby, Apple
    Benj Lipchak, Apple
    Jean-Fran√ßois Roy, Apple
    Piers Daniell, NVIDIA
    Jon Leech 

Status

    Complete.
    Approved by the ARB on 2012/06/12.

Version

    Last Modified Date: July 31, 2012
    Revision: 11

Number

    ARB Extension #125

Dependencies

    OpenGL 1.1 is required.

    This extension is written against the OpenGL 4.2 compatibility specification.

    This extension trivially interacts with ARB_debug_output.

Overview

    This extension defines a mechanism for OpenGL applications to label their 
    objects (textures, buffers, shaders, etc.) with a descriptive string. 
    
    When profiling or debugging an OpenGL application within an external or 
    built-in (debut output API) debugger or profiler it is difficult to 
    identify objects from their object names. 
    
    Even when the object itself is viewed it can be problematic to 
    differentiate between similar objects. Attaching a label to an object         
    helps obviate this difficulty.
    
    The intended purpose of this is purely to improve the user experience 
    within OpenGL development tools and application built-in profilers and 
    debuggers.

New Procedures and Functions

    void ObjectLabel(enum identifier, uint name, sizei length, 
        const char *label);

    void GetObjectLabel(enum identifier, uint name, sizei bufSize, 
        sizei *length, char *label);

    void ObjectPtrLabel(void* ptr, sizei length, 
        const char *label);

    void GetObjectPtrLabel(void* ptr, sizei bufSize, 
        sizei *length, char *label);

New Tokens

    Tokens accepted or provided by the <identifier> parameters of
    ObjectLabel and GetObjectLabel:

        BUFFER                                          = 0x82E0
        SHADER                                          = 0x82E1
        PROGRAM                                         = 0x82E2                                  
        QUERY                                           = 0x82E3
        PROGRAM_PIPELINE                                = 0x82E4
        SAMPLER                                         = 0x82E6
        TRANSFORM_FEEDBACK
      [[ Compatibility Profile ]] 
        DISPLAY_LIST                                    = 0x82E7
      [[ End Profile-Specific Language ]]

    Accepted by the <pname> parameter of GetBooleanv, GetIntegerv,
    GetFloatv, GetDoublev, and GetInteger64v:

        MAX_LABEL_LENGTH                                = 0x82E8

Additions to Chapter 2 of the OpenGL 4.2 (compatibility Profile) Specification
(OpenGL Operation)

    None.

Additions to Chapter 3 of the OpenGL 4.2 (compatibility Profile) Specification
(Rasterization)

    None.

Additions to Chapter 4 of the OpenGL 4.2 (compatibility Profile) Specification
(Per-Fragment Operations and the Frame Buffer)

    None.

Additions to Chapter 5 of the OpenGL 4.2 (compatibility Profile) Specification
(Special Functions)
    
    Add new section 5.5.7 "Debug Labels":

    Debug labels provide a method for annotating any object (texture,
    buffer, shader, etc.) with a descriptive text label. These labels may
    then be used by the debug output (see section 5.5) or an external tool
    such as a debugger or profiler to describe labelled objects.
    
    The command
    
        void ObjectLabel(enum identifier, uint name, sizei length, const char *label);
        
    labels the object identified by <name> and its namespace <identifier>.
    <identifier> must be one of the tokens in table 5.1, indicating the type
    of the object corresponding to <name>.

        Identifier           Object Type
        ---------------------------------------
        BUFFER            |  buffer
        SHADER            |  shader 
        PROGRAM           |  program
        VERTEX_ARRAY      |  vertex array 
        QUERY             |  query
        PROGRAM_PIPELINE  |  program pipeline
        TRANSFORM_FEEDBACK|  transform feedback
        SAMPLER           |  sampler
        TEXTURE           |  texture 
        RENDERBUFFER      |  render buffer
        FRAMEBUFFER       |  frame buffer
[[ Compatibility Profile Only]] 
        DISPLAY_LIST      |  display list 
[[ End Profile-Specific Language ]]
        ---------------------------------------
        Table 5.1. Object namespace identifiers and the corresponding object
        types.

    <label> contains a string used to label an object. <length> contains the
    number of characters in <label>. If <length> is negative, it is implied that
    <label> contains a null-terminated string. If <label> is NULL, any debug
    label is effectively removed from the object.

    An INVALID_ENUM error is generated if <identifier> is not one of the
    object types listed in table 5.1.

    An INVALID_VALUE error is generated if <name> is not the name of a
    valid object of the type specified by <identifier>.

    An INVALID_VALUE error is generated if the number of characters in
    <label>, excluding the null terminator when <length> is negative, is not
    less than the value of MAX_LABEL_LENGTH.

    The command
    
        void ObjectPtrLabel(void* ptr, sizei length, const char *label);
        
    labels the sync object identified by <ptr>. <length> and <label> match
    the corresponding arguments of ObjectLabel.

    An INVALID_VALUE error is generated if <ptr> is not the name of a sync
    object.

    An INVALID_VALUE error is generated if the number of characters in
    <label>, excluding the null terminator when <length> is negative, is not
    less than the value of MAX_LABEL_LENGTH.

    A label is part of the state of the object to which it is associated. 
    The initial state of an object's label is the empty string. Labels need
    not be unique.

Additions to Chapter 6 of the OpenGL 4.2 (compatibility Profile) Specification 
(State and State Requests)

    Add new section 6.1.16 "Debug Label Queries":

    The command
    
        void GetObjectLabel(enum identifier, uint name, sizei bufSize, 
            sizei *length, char *label);

    returns in <label> the string labelling an object. <identifier> and
    <name> specify the namespace and name of the object, and match the
    corresponding arguments of ObjectLabel (see section 5.5.7).

    <label> will be null-terminated. The actual number of characters written
    into <label>, excluding the null terminator, is returned in <length>. If
    <length> is NULL, no length is returned. The maximum number of
    characters that may be written into <label>, including the null
    terminator, is specified by <bufSize>. If no debug label was specified
    for the object then <label> will contain a null-terminated empty string,
    and zero will be returned in <length>. If <label> is NULL and <length>
    is non-NULL then no string will be returned and the length of the label
    will be returned in <length>.
    
    An INVALID_ENUM error is generated if <identifier> is not one of the
    object types listed in table 5.1.

    An INVALID_VALUE error is generated if <name> is not the name of a
    valid object of the type specified by <identifier>.

    The command

        void GetObjectPtrLabel(void* ptr, sizei bufSize, 
            sizei *length, char *label);

    returns in <label> the string labelling the sync object identified by
    <ptr>. <bugSize>, <length>, and <label> match the corresponding
    arguments of GetObjectLabel.

    An INVALID_VALUE error is generated if <ptr> is not the name of a sync
    object.

Errors

    An INVALID_ENUM error is generated by ObjectLabel and GetObjectLabel if
    <identifier> is not one of the object namespace tokens in table 5.1.

    An INVALID_VALUE error is generated by ObjectLabel and
    GetObjectLabel if <name> is not the name of a valid object of the type
    specified by <identifier>.

    An INVALID_VALUE error is generated by ObjectPtrLabel and
    GetObjectPtrLabel if <ptr> is not the name of a sync object.

    An INVALID_VALUE error is generated by ObjectLabel and ObjectPtrLabel if
    the number of characters in <label>, excluding the null terminator when
    <length> is negative, is not less than MAX_LABEL_LENGTH.


New State

    Add the following to Table 6.14 Buffer Object State:
    
                                      Initial
    Get Value  Type  Get Command      Value    Description  Sec
    ---------  ----  ----------       -------  -----------  ---
    LABEL      S     GetObjectLabel   empty    Debug label  6.2

    Add the following to Table 6.24 Textures (state per texture object):
    
                                       Initial
    Get Value  Type  Get Command       Value    Description  Sec
    ---------  ----  ----------------  -------  -----------  ---
    LABEL      S     GetObjectLabel    empty    Debug label  6.2

    Add the following to Table 6.44 Shader Object State:
    
                                      Initial
    Get Value  Type  Get Command      Value    Description  Sec
    ---------  ----  ---------------  -------  -----------  ---
    LABEL      S     GetObjectLabel   empty    Debug label  6.2

    Add the following to Table 6.46 Program Object State:
    
                                       Initial
    Get Value  Type  Get Command       Value    Description  Sec
    ---------  ----  ----------------  -------  -----------  ---
    LABEL      S     GetObjectLabel    empty    Debug label  6.2

    Add the following to Table 6.36 Renderbuffer  (state per renderbuffer object):
    
                                            Initial
    Get Value  Type  Get Command            Value    Description  Sec
    ---------  ----  ---------------------  -------  -----------  ---
    LABEL      S     GetObjectLabel         empty    Debug label  6.2

    Add the following to Table 6.33 Framebuffer (state per framebuffer object):
    
                                           Initial
    Get Value  Type  Get Command           Value    Description  Sec
    ---------  ----  --------------------  -------  -----------  ---
    LABEL      S     GetObjectLabel        empty    Debug label  6.2

    Add the following to Table 6.9 Vertex Array Object State:
    
                                           Initial
    Get Value  Type  Get Command           Value    Description  Sec
    ---------  ----  --------------------  -------  -----------  ---
    LABEL      S     GetObjectLabel        empty    Debug label  6.2

    Add the following to Table 6.54 Query Object State:
    
                                     Initial
    Get Value  Type  Get Command     Value    Description  Sec
    ---------  ----  --------------  -------  -----------  ---
    LABEL      S     GetObjectLabel  empty    Debug label  6.2

    Add the following to Table 6.45 Program Pipeline Object State:
    
                                               Initial
    Get Value  Type  Get Command               Value    Description  Sec
    ---------  ----  ------------------------  -------  -----------  ---
    LABEL      S     GetObjectLabel            empty    Debug label  6.2

    Add the following to Table 6.26 Textures (state per sampler object):
     
                                       Initial
    Get Value  Type  Get Command       Value    Description  Sec
    ---------  ----  ----------------  -------  -----------  ---
    LABEL      S     GetObjectLabel    empty    Debug label  6.2

    Add the following to Table 6.56 Transform Feedback State:
    
                                     Initial
    Get Value  Type  Get Command     Value    Description  Sec
    ---------  ----  --------------  -------  -----------  ---
    LABEL      S     GetObjectLabel  empty    Debug label  6.2

    Add the following to Table 6.57 Sync (state per sync object):
    
                                             Initial
    Get Value  Type  Get Command             Value    Description  Sec
    ---------  ----  ----------------------  -------  -----------  ---
    LABEL      S     GetObjectPtrLabel       empty    Debug label  6.2

      [[ Compatibility Profile ]] 
    Add Table 6.60 Display List State:
    
                                             Initial
    Get Value  Type  Get Command             Value    Description  Sec
    ---------  ----  ----------------------  -------  -----------  ---
    LABEL      S     GetObjectLabel          empty    Debug label  6.2
      [[ End Profile-Specific Language ]]

New Implementation Dependent State

                                          Minimum
    Get Value          Type  Get Command  Value    Description                Section  
    -----------------  ----  -----------  -------  -------------------------  -------

    MAX_LABEL_LENGTH   Z+    GetIntegerv  256      Max length of a label      5.5.7
                                                   string


Issues

    (1) Should we use a single function to set the 
        label for all objects?

    DISCUSSION:
      This is the approach chosen in OpenGL ES extension 
      EXT_debug_label. It builds up a new strong precedent for an
      important functionality but not exactly one which purpose is
      to build a strong design precedent.

      On one hand using a unique function for all objects reduce 
      the number of new entry point from 24 to 2.

      Sync objects are named using anonymous pointers, rather than integers,
      which may not be representable as GLuint names. This means we must
      have separate entry points taking pointers (ObjectPtrLabel and
      GetObjectPtrLabel) for these object types. Also see issue 4.

    RESOLVED: 
      For the purpose of convergence with ES, the groups have voted 
      for only 2 functions. To accomodate sync objects, this
      was later expanded to 4 functions.

    (2) Do we need a maximum length (MAX_LABEL_LENGTH) for the label?

    DISCUSSION: 
      Following the precedents given by others strings in OpenGL, 
      this seems useful. On one hand ARB_debug_output has a maximum  
      size of the debug message (MAX_DEBUG_MESSAGE_LENGTH_ARB), shader 
      variable names have a maximum length but on other hand the 
      shader source and the program info log doesn't have such 
      limitation. However, it seems hard to imagine that 
      implementations doesn't have limitation somehow. 

    RESOLVED: Yes

    (3) Should we provide a function to label a display list?

    RESOLVED: Yes for compatibility profile only.

    (4) Should the calls taking sync object handles use void* or GLsync
    parameters?

    DISCUSSION:
      The sync object handle design is intended to generalize to other
      handle-based object types in the future; such types of objects share a
      single namespace and are self-identifying (so no <identifier> argument
      is required). Generic functions operating on object handles must take
      a void*, rather than the anoymous struct pointers used for GLsync.
      This loses a small amount of compile-type type checking but
      generalizes the function for possible future object types names with
      handles.

    RESOLVED: Use void* parameters and *ObjectPtrLabel commands
    not specific to sync objects.

Revision History

    Revision 11, 2012/07/31 (criccio)
      - ObjectLabel generates an INVALID_VALUE error if <name> 
        doesn't identify a valid object.

    Revision 10, 2012/06/27 (Jon Leech)
      - Update language to match core spec, specify consistent and complete
        error sets for all calls, and add issue 4 about the *PtrLabel
        interfaces.

    Revision 9, 2012/06/12 (criccio)
      - Added ObjectPtrLabel and GetObjectPtrLabel (bug 9140)

    Revision 8, 2012/06/08 (Jon Leech)
      - Assign enum values for new tokens

    Revision 7, 2012/05/29 (Jon Leech)
      - Finish renaming ObjectLabel and GetObjectLabel

    Revision 6, 2012/05/26 (criccio)
      - Label are both null-terminated strings and sized strings
      - The group prefer the function to be called ObjectLabel and GetObjectLabel

    Revision 5, 2012/05/17 (criccio)
      - Clean up issues
      - Added description for <identifier>

    Revision 4, 2012/05/16 (criccio)
      - Large update to follow the ES EXT_debug_label approach   

    Revision 3, 2012/04/30 (criccio)
      - Fixed tabs

    Revision 2, 2012/01/10 (criccio)
      - Remove the token "Parameter" from Get functions

    Revision 1, 2012/01/05 (criccio)
      - First draft
